// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var getSentenceNum, haveNewText, initializeSelectionPopup, root, splitIntoSentences;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (!(root.selectedLanguage != null)) root.selectedLanguage = 'zh';

  chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
    if (request['selectedLanguage'] != null) {
      root.popupEnabled = true;
      initializeSelectionPopup();
      root.selectedLanguage = request['selectedLanguage'];
    }
    if (request['closePopup'] != null) root.popupEnabled = false;
    if (request['log'] != null) console.log(request['log']);
    return console.log(request);
  });

  haveNewText = function() {
    console.log(root.currentText);
    $('#popupSentenceDisplay').dialog('open');
    $('#popupSentenceDisplay').text('');
    $('#popupSentenceDisplay').css('width', 'auto');
    $('#popupSentenceDisplay').css('height', 'auto');
    $('.selection.selected').unbind('click', haveNewText);
    $('.selection.selected').bind('click', haveNewText);
    $('.location-lens.selected').unbind('click', haveNewText);
    $('.location-lens.selected').bind('click', haveNewText);
    $('.ui-dialog').css('z-index', 99);
    $('.ui-dialog').css('width', 'auto');
    $('.ui-dialog').css('height', 'auto');
    $('#popupSentenceDisplay').css('max-height', '500px');
    return root.addSentence(root.currentText, root.selectedLanguage, $('#popupSentenceDisplay'), true);
  };

  root.finishedInitializing = false;

  initializeSelectionPopup = function() {
    var popupSentenceDisplay;
    if (root.finishedInitializing) return;
    root.finishedInitializing = true;
    root.serverLocation = 'http://geza.csail.mit.edu:1357';
    if (($('#popupSentenceDisplay') != null) && $('#popupSentenceDisplay').length > 0) {
      return;
    }
    popupSentenceDisplay = $('<div id="popupSentenceDisplay">dialog content is here</div>');
    return popupSentenceDisplay.dialog({
      'autoOpen': false,
      'modal': false,
      'title': '',
      'position': ['left', 'top'],
      'zIndex': 99,
      'width': 'auto',
      'height': 'auto',
      'maxHeight': '100px',
      'max-height': '100px',
      'create': function() {
        return $(this).css("maxHeight", '100px').css('max-height', '100px');
      }
    }).css('max-height', '100px').css('maxHeight', '100px');
  };

  root.previousSelection = null;

  splitIntoSentences = function(text) {
    var c, currentSentence, output, _i, _len;
    output = [];
    currentSentence = [];
    for (_i = 0, _len = text.length; _i < _len; _i++) {
      c = text[_i];
      currentSentence.push(c);
      if ('。，、。.,“”；；;"「」（）（）()[]'.indexOf(c) !== -1) {
        output.push(currentSentence.join(''));
        currentSentence = [];
      }
    }
    if (currentSentence.length > 0) output.push(currentSentence.join(''));
    return output;
  };

  getSentenceNum = function(sentenceList, offsetIdx) {
    var idx, offsetSoFar, sentence, _i, _len;
    offsetSoFar = 0;
    for (idx = _i = 0, _len = sentenceList.length; _i < _len; idx = ++_i) {
      sentence = sentenceList[idx];
      offsetSoFar += sentence.length;
      if (offsetSoFar >= offsetIdx) return idx;
    }
    return sentenceList.length - 1;
  };

  root.popupEnabled = false;

  setInterval(function() {
    var currentSelection, currentSelectionNode, currentSelectionParent, currentSelectionParentText, selectedSentenceIdx, selectedSentenceText, sentencesInParent;
    if (!root.popupEnabled) return;
    currentSelectionNode = window.getSelection();
    currentSelection = currentSelectionNode.toString();
    if ((currentSelection != null) && currentSelection.length > 0 && currentSelection.length < 100) {
      if (currentSelection === root.previousSelection) return;
      root.previousSelection = root.currentText = currentSelection;
      return haveNewText();
    } else {
      currentSelectionParent = currentSelectionNode.anchorNode;
      console.log(currentSelectionParent);
      if (!(currentSelectionParent != null)) return;
      currentSelectionParentText = currentSelectionParent.textContent;
      if (!(currentSelectionParentText != null)) return;
      sentencesInParent = splitIntoSentences(currentSelectionParentText);
      console.log(sentencesInParent);
      selectedSentenceIdx = getSentenceNum(sentencesInParent, currentSelectionNode.anchorOffset);
      console.log(selectedSentenceIdx);
      selectedSentenceText = sentencesInParent[selectedSentenceIdx];
      if (selectedSentenceText !== root.previousSelection) {
        root.previousSelection = root.currentText = selectedSentenceText;
        return haveNewText();
      }
    }
  }, 1000);

}).call(this);
